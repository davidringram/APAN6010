names(airline.raw)[contains_any_na]
summary(airline.raw)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
airline.kmeans <- drop_na(airline.raw.drop)
contains_any_na = sapply(airline.kmeans, function(x) any(is.na(x)))
names(airline.kmeans)[contains_any_na]
str(airline.kmeans)
summary(airline.kmeans)
recipe_kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors())
recipe_kmeans %>% prep() %>% bake() %>% glimpse()
recipe_kmeans %>% prep() %>% juice() %>% glimpse()
recipe_kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors())
recipe_kmeans %>% prep() %>% juice() %>% glimpse()
airline.raw <- read.csv("airline.review.cleaned.csv")
head(airline.raw)
is.na(airline.raw)
contains_any_na = sapply(airline.raw, function(x) any(is.na(x)))
names(airline.raw)[contains_any_na]
summary(airline.raw)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -country, -date_flown, -X)
airline.kmeans <- drop_na(airline.raw.drop)
contains_any_na = sapply(airline.kmeans, function(x) any(is.na(x)))
names(airline.kmeans)[contains_any_na]
str(airline.kmeans)
summary(airline.kmeans)
str(airline.kmeans)
recipe_kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors())
recipe_kmeans %>% prep() %>% juice() %>% glimpse()
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
airline.kmeans <- drop_na(airline.raw.drop)
contains_any_na = sapply(airline.kmeans, function(x) any(is.na(x)))
names(airline.kmeans)[contains_any_na]
str(airline.kmeans)
summary(airline.kmeans)
recipe_kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors())
recipe_kmeans %>% prep() %>% bake() %>% glimpse()
recipe_kmeans %>% prep() %>% juice() %>% glimpse()
packages <- c('tidyverse', 'recipes', 'tidyclust', 'tidymodels', 'tidyqunty', 'plotly')
lapply(packages, library, character.only=TRUE)
install.packages("tidyclust")
install.packages("tidyquant")
install.packages("plotly")
packages <- c('tidyverse', 'recipes', 'tidyclust', 'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
head(recipe_kmeans)
View(recipe_kmeans)
recipe_kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors())
recipe_kmeans %>% prep() %>% juice() %>% glimpse()
View(airline.kmeans)
View(airline.kmeans)
str(airline.kmeans)
summary(airline.kmeans)
recipe_kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors())
str(airline.kmeans)
model_kmeans <- k_means(num_clusters = 4) %>%
set_engine("stats")
set.seed(666)
wflw_fit_kmeans <- workflows() %>%
add_recipe(recipe_kmeans %>%
wflw_fit_kmeans <- workflows() %>%
add_model(model_kmeans) %>%
add_recipe(recipe_kmeans %>%
fit(airline.kmeans)
wflw_fit_kmeans
wflw_fit_kmeans <- workflows() %>%
add_recipe(recipe_kmeans %>%
wflw_fit_kmeans <- workflows() %>%
add_model(model_kmeans) %>%
add_recipe(recipe_kmeans) %>%
fit(airline.kmeans)
wflw_fit_kmeans
airline.raw <- read.csv("airline.review.cleaned.csv")
head(airline.raw)
is.na(airline.raw)
contains_any_na = sapply(airline.raw, function(x) any(is.na(x)))
names(airline.raw)[contains_any_na]
summary(airline.raw)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
airline.kmeans <- drop_na(airline.raw.drop)
contains_any_na = sapply(airline.kmeans, function(x) any(is.na(x)))
names(airline.kmeans)[contains_any_na]
str(airline.kmeans)
summary(airline.kmeans)
recipe_kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors())
recipe_kmeans %>% prep() %>% juice() %>% glimpse()
model_kmeans <- k_means(num_clusters = 4) %>%
set_engine("stats")
set.seed(123)
wflw_fit_kmeans <- workflows() %>%
add_model(model_kmeans) %>%
add_recipe(recipe_kmeans) %>%
fit(airline.kmeans)
model_kmeans <- k_means(num_clusters = 4) %>%
set_engine("stats")
install.packages('tidymodels')
library('tidymodels')
install.packages('tidymodels')
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
packages <- c('tidyverse', 'recipes', 'tidyclust', 'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
library(tidymodels)
library(tidyquant)
detach("package:tidyverse", unload = TRUE)
library(tidymodels)
detach("package:tidymodels", unload = TRUE)
detach("package:tidyclust", unload = TRUE)
packages <- c('tidyverse', 'recipes', 'tidyclust', 'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
install.packages("tidymodels")
packages <- c('tidyverse', 'recipes', 'tidyclust', 'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
library(tidymodels)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
airline.kmeans <- drop_na(airline.raw.drop)
contains_any_na = sapply(airline.kmeans, function(x) any(is.na(x)))
names(airline.kmeans)[contains_any_na]
str(airline.kmeans)
summary(airline.kmeans)
recipe_kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors())
recipe_kmeans %>% prep() %>% juice() %>% glimpse()
model_kmeans <- k_means(num_clusters = 4) %>%
set_engine("stats")
set.seed(123)
w_fit_kmeans <- workflows() %>%
add_model(model_kmeans) %>%
add_recipe(recipe_kmeans) %>%
fit(airline.kmeans)
w_fit_kmeans <- workflows() %>%
add_model(model_kmeans) %>%
add_recipe(recipe_kmeans) %>%
fit(airline.kmeans)
plot(recipe_kmeans)
str(airline.kmeans)
summary(airline.kmeans)
recipe_kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors())
recipe_kmeans %>% prep() %>% juice() %>% glimpse()
bake(recipe_kmeans, new_data = airline.kmeans)
kmean_baked <- bake(recipe_kmeans, new_data = airline.kmeans)
contains_any_na = sapply(airline.kmeans, function(x) any(is.na(x)))
names(airline.kmeans)[contains_any_na]
str(airline.kmeans)
summary(airline.kmeans)
recipe.kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors()) %>%
prep()
kmeans.baked <- bake(recipe.kmeans, new_data = airline.kmeans)
kmeans.baked
head(kmeans.baked)
kmens.model <- kmeans(kmeans.baked, centers = 4)
set.seed(43168)
kmens.model <- kmeans(kmeans.baked, centers = 4)
model.sum(kmeans.baked, kmeans.model$clusters)
model.summ(kmeans.baked, kmeans.model$clusters)
seg.summ(kmeans.baked, kmeans.model$clusters)
seg.summ <- function(data, groups) {
aggregate(data, list(groups), function(x), mean(as.numeric(x)))
seg.summ(kmeans.baked, kmeans.model$clusters)
seg.summ <- function(data, groups) {
aggregate(data, list(groups), function(x), mean(as.numeric(x)))
seg.summ <- function(data, groups) {
aggregate(data, list(groups), function(x) mean(as.numeric(x)))
}
seg.summ(kmeans.baked, kmeans.model$clusters)
kmeans.model <- kmeans(kmeans.baked, centers = 4)
seg.summ(kmeans.baked, kmeans.model$clusters)
head(kmeans.baked)
head(kmeans.model$cluster)
packages <- c('tidyverse', 'recipes', 'cluster', 'tidyclust') #'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
clusplot(kmeans.baked, model.kmeans$cluster, color = TRUE, shade = TRUE, labels = 4, lones = 0, main = "K Means")
clusplot(kmeans.baked, kmeans.mode$cluster, color = TRUE, shade = TRUE, labels = 4, lones = 0, main = "K Means")
clusplot(kmeans.baked, kmeans.model$cluster, color = TRUE, shade = TRUE, labels = 4, lones = 0, main = "K Means")
plot(kmeans.baked)
boxplot(kmeans.baked$recommended_yes ~ kmeans.model$cluster)
head(kmeans.model$cluster)
clusplot(kmeans.baked, kmeans.model$cluster, color = TRUE, shade = TRUE, labels = 4, lones = 0, main = "K Means")
clusplot(kmeans.baked, kmeans.model$cluster, color = TRUE, shade = TRUE, labels = 4, lones = 0, main = "K Means", legend = TRUE)
clusplot(kmeans.baked, kmeans.model$cluster, color = TRUE, shade = TRUE, labels = 4, lones = 0, main = "K Means")
wssplot(kmeans.baked)
install.packages(rattle)
install.packages('rattle')
library(rattle)
wssplot(kmeans.baked)
?devAskNewPage
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
wssplot(kmeans.baked)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="No. of Clusters",
ylab="WSS")
wss
}
wssplot(kmeans.baked)
packages <- c('tidyverse', 'recipes', 'cluster', 'rattle', 'NbClust', 'tidyclust') #'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
install.packages("NbClust")
nc <- NbClust(model.kmeans, min.nc=2, max.nc = 15, method = "kmeans")
library(NbClust)
nc <- NbClust(model.kmeans, min.nc=2, max.nc = 15, method = "kmeans")
nc <- NbClust(kmeans.baked, min.nc=2, max.nc = 15, method = "kmeans")
nc <- NbClust(kmeans.baked, min.nc = 2, max.nc = 15, method = "kmeans")
kmeans.model$size
pct_var <- data.frame(pct_var = 0, num_clusters=2:14)
totalss <- kmeans(kmeans.baked, centers = 14, nstart = 50, iter.max = 100)$totss
for(i in 2:14) {
pct_var[i-1, 'pct_var'] <- kmeans(kmeans.baked, centers=i, nstart = 50, iter.max = 100)
$betweenss/totalss
for(i in 2:14) {
pct_var[i-1, 'pct_var'] <- kmeans(kmeans.baked, centers=i, nstart = 50, iter.max = 100)$betweenss/totalss
}
View(seg.summ)
plot(pct_var)
library(klaR)
library(MASS)
library(dplyr)
library(ggplot2)
library(FNN)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ellipse)
PSDS_PATH <- file.path(dirname(dirname(getwd())))
sp500_px <- read.csv(file.path(PSDS_PATH, 'data', 'sp500_data.csv.gz'), row.names=1)
sp500_sym <- read.csv(file.path(PSDS_PATH, 'data', 'sp500_sectors.csv'), stringsAsFactors = FALSE)
loan_data <- read.csv(file.path(PSDS_PATH, 'data', 'loan_data.csv.gz'))
loan_data$outcome <- ordered(loan_data$outcome, levels=c('paid off', 'default'))
housetasks <- read.csv(file.path(PSDS_PATH, 'data', 'housetasks.csv'), row.names=1)
PSDS_PATH <- file.path(dirname(dirname(getwd('/Users/davidingram/Desktop/practical-statistics-for-data-scientists-master'))))
PSDS_PATH <- file.path(dirname(dirname(getwd('/Users/davidingram/Desktop/practical-statistics-for-data-scientists-master/data'))))
PSDS_PATH <- file.path(dirname(dirname(getwd())))
sp500_px <- read.csv(file.path(PSDS_PATH, 'data', 'sp500_data.csv.gz'), row.names=1)
sp500_sym <- read.csv(file.path(PSDS_PATH, 'data', 'sp500_sectors.csv'), stringsAsFactors = FALSE)
loan_data <- read.csv(file.path(PSDS_PATH, 'data', 'loan_data.csv.gz'))
sp500_px <- read.csv(file.path(PSDS_PATH, 'data', 'sp500_data.csv.gz'), row.names=1)
sp500_px <- read.csv('/Users/davidingram/Desktop/practical-statistics-for-data-scientists-master/data/sp500_data.csv.gz'), row.names=1)
graph <- ggplot(pct_var, aes(x=num_clusters, y=pct_var)) +
geom_line() +
geom_point() +
labs(y='% Variance Explained', x='Number of Clusters') +
scale_x_continuous(breaks=seq(2, 14, by=2))   +
theme_bw()
graph
centers <- as.data.frame(t(kmeans.model$centers))
names(centers) <- paste('Cluster', 1:5)
centers$Symbol <- row.names(centers)
centers <- as.data.frame(t(kmeans.model$centers))
names(centers) <- paste('Cluster', 1:5)
centers$Symbol <- row.names(centers)
centers <- gather(centers, 'Cluster', 'Mean', -Symbol)
centers$Color = centers$Mean > 0
graph <- ggplot(centers, aes(x=Symbol, y=Mean, fill=Color)) +
geom_bar(stat='identity', position='identity', width=.75) +
facet_grid(Cluster ~ ., scales='free_y') +
guides(fill='none')  +
ylab('Component Loading') +
theme_bw() +
theme(axis.title.x=element_blank(),
axis.text.x=element_text(angle=90, vjust=0.5))
graph
graph
graph <- ggplot(pct_var, aes(x=num_clusters, y=pct_var)) +
geom_line() +
geom_point() +
labs(y='% Variance Explained', x='Number of Clusters') +
scale_x_continuous(breaks=seq(2, 14, by=2))   +
theme_bw()
graph
View(kmeans.baked)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="No. of Clusters",
ylab="WSS")
wss
}
wssplot(kmeans.baked) # doesn't give us a perfect picture, try another
pct_var <- data.frame(pct_var = 0, num_clusters=2:14)
totalss <- kmeans(kmeans.baked, centers = 14, nstart = 50, iter.max = 100)$totss
for(i in 2:14) {
pct_var[i-1, 'pct_var'] <- kmeans(kmeans.baked, centers=i, nstart = 50, iter.max = 100)$betweenss/totalss
}
graph_elbow <- ggplot(pct_var, aes(x=num_clusters, y=pct_var)) +
geom_line() +
geom_point() +
labs(y='% Variance Explained', x='Number of Clusters') +
scale_x_continuous(breaks=seq(2, 14, by=2))   +
theme_bw()
graph_elbow
wssplot(kmeans.baked) # doesn't give us a perfect picture, try another
set.seed(43168)
kmeans.model <- kmeans(kmeans.baked, centers = 6)
head(kmeans.model$cluster)
clusplot(kmeans.baked, kmeans.model$cluster, color = TRUE, shade = TRUE, labels = 4, lones = 0, main = "K Means")
kmeans.model$size #clusters are pretty imbalanced so either outliers or different group sizes, further investigation
centers <- as.data.frame(t(kmeans.model$centers))
names(centers) <- paste('Cluster', 1:6)
centers$Symbol <- row.names(centers)
centers <- gather(centers, 'Cluster', 'Mean', -Symbol)
centers$Color = centers$Mean > 0
graph_clust <- ggplot(centers, aes(x=Symbol, y=Mean, fill=Color)) +
geom_bar(stat='identity', position='identity', width=.75) +
facet_grid(Cluster ~ ., scales='free_y') +
guides(fill='none')  +
ylab('Component Loading') +
theme_bw() +
theme(axis.title.x=element_blank(),
axis.text.x=element_text(angle=90, vjust=0.5))
graph_clust
View(airline.raw)
packages <- c('tidyverse', 'recipes', 'cluster', 'rattle', 'tidyclust') #'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
setwd("/Users/davidingram/Desktop/R_Final")
airline.raw <- read.csv("airline.review.cleaned.csv")
head(airline.raw)
View(airline.raw)
departing_dest <- airline.raw$departing_dest
departing_dest
packages <- c('tidyverse', 'recipes', 'cluster', 'rattle', 'tidyclust') #'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
setwd("/Users/davidingram/Desktop/R_Final")
# === Load Data and Check ===
airline.raw <- read.csv("airline.review.cleaned.csv")
head(airline.raw)
is.na(airline.raw)
contains_any_na = sapply(airline.raw, function(x) any(is.na(x)))
names(airline.raw)[contains_any_na]
summary(airline.raw)
# === Prep & Drop NAs === (drops to 536, but over that 500 mark)
departing_dest <- airline.raw$departing_dest
departing_dest
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
packages <- c('tidyverse', 'recipes', 'cluster', 'rattle', 'tidyclust') #'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
setwd("/Users/davidingram/Desktop/R_Final")
airline.raw <- read.csv("airline.review.cleaned.csv")
head(airline.raw)
is.na(airline.raw)
contains_any_na = sapply(airline.raw, function(x) any(is.na(x)))
names(airline.raw)[contains_any_na]
summary(airline.raw)
departing_dest <- airline.raw$departing_dest
departing_dest
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
airline.kmeans <- drop_na(airline.raw.drop)
contains_any_na = sapply(airline.kmeans, function(x) any(is.na(x)))
names(airline.kmeans)[contains_any_na]
str(airline.kmeans)
summary(airline.kmeans)
recipe.kmeans <- recipe(~ ., data = airline.kmeans) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%
step_scale(all_nominal_predictors()) %>%
prep()
kmeans.baked <- bake(recipe.kmeans, new_data = airline.kmeans)
head(kmeans.baked)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="No. of Clusters",
ylab="WSS")
wss
}
wssplot(kmeans.baked) # doesn't give us a perfect picture, try another
pct_var <- data.frame(pct_var = 0, num_clusters=2:14)
totalss <- kmeans(kmeans.baked, centers = 14, nstart = 50, iter.max = 100)$totss
for(i in 2:14) {
pct_var[i-1, 'pct_var'] <- kmeans(kmeans.baked, centers=i, nstart = 50, iter.max = 100)$betweenss/totalss
}
graph_elbow <- ggplot(pct_var, aes(x=num_clusters, y=pct_var)) +
geom_line() +
geom_point() +
labs(y='% Variance Explained', x='Number of Clusters') +
scale_x_continuous(breaks=seq(2, 14, by=2))   +
theme_bw()
graph_elbow # still no definite cluster size, 6 stands out most
set.seed(43168)
kmeans.model <- kmeans(kmeans.baked, centers = 6)
head(kmeans.model$cluster)
clusplot(kmeans.baked, kmeans.model$cluster, color = TRUE, shade = TRUE, labels = 4, lones = 0, main = "K Means")
kmeans.model$size #clusters are pretty imbalanced so either outliers or different group sizes, further investigation
centers <- as.data.frame(t(kmeans.model$centers))
names(centers) <- paste('Cluster', 1:6)
centers$Symbol <- row.names(centers)
centers <- gather(centers, 'Cluster', 'Mean', -Symbol)
centers$Color = centers$Mean > 0
graph_clust <- ggplot(centers, aes(x=Symbol, y=Mean, fill=Color)) +
geom_bar(stat='identity', position='identity', width=.75) +
facet_grid(Cluster ~ ., scales='free_y') +
guides(fill='none')  +
ylab('Component Loading') +
theme_bw() +
theme(axis.title.x=element_blank(),
axis.text.x=element_text(angle=90, vjust=0.5))
graph_clust
airline.raw <- read.csv("airline.review.cleaned.csv")
head(airline.raw)
is.na(airline.raw)
contains_any_na = sapply(airline.raw, function(x) any(is.na(x)))
names(airline.raw)[contains_any_na]
summary(airline.raw)
departing_dest <- airline.raw$departing_dest
departing_dest
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
View(airline.raw)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
packages <- c('tidyverse', 'recipes', 'cluster', 'rattle', 'tidyclust') #'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
setwd("/Users/davidingram/Desktop/R_Final")
airline.raw <- read.csv("airline.review.cleaned.csv")
head(airline.raw)
is.na(airline.raw)
contains_any_na = sapply(airline.raw, function(x) any(is.na(x)))
names(airline.raw)[contains_any_na]
summary(airline.raw)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
airline.kmeans <- drop_na(airline.raw.drop)
contains_any_na = sapply(airline.kmeans, function(x) any(is.na(x)))
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
packages <- c('tidyverse', 'recipes', 'cluster', 'rattle', 'tidyclust') #'tidymodels', 'tidyquant', 'plotly')
library(tidyselect)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
packages <- c('tidyverse', 'recipes', 'cluster', 'rattle', 'tidyclust') #'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
setwd("/Users/davidingram/Desktop/R_Final")
airline.raw <- read.csv("airline.review.cleaned.csv")
head(airline.raw)
is.na(airline.raw)
contains_any_na = sapply(airline.raw, function(x) any(is.na(x)))
names(airline.raw)[contains_any_na]
summary(airline.raw)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type, -layover, -arriving_dest, -departing_dest, -country, -date_flown, -X)
contains_any_na = sapply(airline.raw, function(x) any(is.na(x)))
names(airline.raw)[contains_any_na]
airline.raw.drop <- airline.raw %>%
select(to.drop)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type)
to.keep <- c('type_of_travellers', 'seat_types','seat_comfort','cabin_staff_service',
'ground_service','food_beverages',' wifi_connectivity','inflight_entertainment', 'value_for_money','recommended')
to.drop <- c('-aircraft_type', '-layover', '-arriving_dest', '-departing_dest', '-country', '-date_flown', '-X', ' wifi_connectivity')
to.keep <- c('type_of_travellers', 'seat_types','seat_comfort','cabin_staff_service',
'ground_service','food_beverages','inflight_entertainment', 'value_for_money','recommended')
airline.raw.drop <- airline.raw %>%
select(to.keep)
airline.raw.drop <- airline.raw %>%
select('type_of_travellers', 'seat_types','seat_comfort','cabin_staff_service',
'ground_service','food_beverages','inflight_entertainment', 'value_for_money','recommended')
airline.raw.drop <- airline.raw %>%
select(type_of_travellers, seat_types,seat_comfort,cabin_staff_service)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type)
packages <- c('tidyverse', 'recipes', 'cluster', 'rattle', 'tidyclust') #'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type)
packages <- c('tidyverse', 'recipes', 'cluster', 'rattle', 'tidyclust', 'dyplr') #'tidymodels', 'tidyquant', 'plotly')
lapply(packages, library, character.only=TRUE)
airline.raw.drop <- airline.raw %>%
select(-aircraft_type)
airline.raw.drop <- select(airline.raw, -aircraft_type)
airline.raw.drop <- airline.raw %>% select(-one_of(to.drop))
